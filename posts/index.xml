<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>POST on maakun12</title><link>https://maakun12.github.io/posts/</link><description>Recent content in POST on maakun12</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© maakun12</copyright><lastBuildDate>Mon, 03 Jan 2022 18:24:05 +0900</lastBuildDate><atom:link href="https://maakun12.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>gosecについて調べた事メモ</title><link>https://maakun12.github.io/posts/gosec/</link><pubDate>Mon, 03 Jan 2022 18:24:05 +0900</pubDate><guid>https://maakun12.github.io/posts/gosec/</guid><description>gosec について調べた事メモ 仕事で gosec を使う機会ができたので、調べた事を簡単にメモします。
gosec とは Github のリポジトリには以下のように記載してあります。
Inspects source code for security problems by scanning the Go AST. Go AST を解析して、ソースコードのセキュリティ上問題がある部分を調査します。
AST とは Wiki によると
抽象構文木（英: abstract syntax tree、AST）は、通常の構文木（具象構文木あるいは解析木とも言う）から、言語の意味に関係ない情報を取り除き、意味に関係ある情報のみを取り出した（抽象した）木構造の木である。 参照: https://ja.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%A7%8B%E6%96%87%E6%9C%A8 少し難しい表現に感じますが、要するにプログラムからコメントや意味を持たない空白など不要ものを取り除き、プログラムの文法構造をツリー構造で表現したものみたいです。
どんなパターンを検出してくれるのか こちらに検出パターンの一覧が記載されています。
インストール go install github.com/securego/gosec/v2/cmd/gosec@latest 実行方法 gosec ./... 検査対象を限定する gosec -include=G101 ./... 検査対象を除外する gosec -exclude=G101 .</description></item><item><title>Github PagesでHugoサイトを公開</title><link>https://maakun12.github.io/posts/hugo-deploy/</link><pubDate>Sun, 12 Dec 2021 18:24:05 +0900</pubDate><guid>https://maakun12.github.io/posts/hugo-deploy/</guid><description>Hugoで作成したサイトをGithub Pagesで公開した時のメモです</description></item><item><title>初投稿</title><link>https://maakun12.github.io/posts/first-post/</link><pubDate>Sun, 12 Dec 2021 18:24:05 +0900</pubDate><guid>https://maakun12.github.io/posts/first-post/</guid><description>Hugoを使って自分用のサイトを構築しました。</description></item></channel></rss>